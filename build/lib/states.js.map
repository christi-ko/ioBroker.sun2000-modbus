{
  "version": 3,
  "sources": ["../../src/lib/states.ts"],
  "sourcesContent": ["import {ModbusDatatype} from \"./modbus/modbus_types\";\nimport {MeterStatus, StorageForcibleChargeDischarge, StorageStatus} from \"./state_enums\";\nimport {AdapterInstance} from \"@iobroker/adapter-core\";\nimport {ModbusDevice} from \"./modbus/modbus_device\";\n\ntype MapperFn = (value: any) => Promise<string>\n\ninterface DataField {\n    state: State;\n    register: ModbusRegister;\n    mapper?: MapperFn\n}\n\ninterface StateToUpdate {\n    id: string,\n    value: any\n}\n\ninterface State {\n    id: string;\n    name: string\n    type: ioBroker.CommonType;\n    role: string\n    unit?: string;\n    desc?: string;\n}\n\ninterface ModbusRegister {\n    reg: number;\n    type: ModbusDatatype;\n    length: number;\n    gain?: number;\n}\n\nexport class InverterStates {\n\n    private initialFields: DataField[];\n    private changingFields: DataField[];\n\n    constructor() {\n        this.initialFields = [\n            {\n                state: {id: \"info.model\", name: \"Model\", type: 'string', role: 'state'},\n                register: {reg: 30000, type: ModbusDatatype.string, length: 15}\n            },\n            {\n                state: {id: \"info.modelID\", name: \"Model ID\", type: 'number', role: 'state'},\n                register: {reg: 30070, type: ModbusDatatype.uint16, length: 1}\n            },\n            {\n                state: {id: \"info.serialNumber\", name: \"Serial number\", type: 'string', role: 'state'},\n                register: {reg: 30015, type: ModbusDatatype.string, length: 10}\n            },\n            {\n                state: {id: \"info.ratedPower\", name: \"Rated power\", type: 'number', unit: \"W\", role: 'state'},\n                register: {reg: 30073, type: ModbusDatatype.int32, length: 2}\n            }\n\n        ];\n        this.changingFields = [\n            // inverter\n            {\n                state: {id: \"activePower\", name: \"Active power\", type: 'number', unit: \"W\", role: 'value.power', desc: 'Power currently used'},\n                register: {reg: 32080, type: ModbusDatatype.int32, length: 2}\n            },\n            {\n                state: {id: \"inputPower\", name: \"Input power\", type: 'number', unit: \"W\", role: 'value.power', desc: 'Power from PV'},\n                register: {reg: 32064, type: ModbusDatatype.int32, length: 2}\n            },\n\n            // storage\n            {\n                state: {id: \"storage.runningState\", name: \"Running state\", type: 'string', role: 'value'},\n                register: {reg: 37762, type: ModbusDatatype.uint16, length: 1},\n                mapper: value => Promise.resolve(StorageStatus[value])\n            },\n            {\n                state: {id: \"storage.stateOfCapacity\", name: \"State of capacity\", type: 'number', unit: \"%\", role: 'value.capacity'},\n                register: {reg: 37760, type: ModbusDatatype.uint16, length: 1, gain: 10}\n            },\n            {\n                state: {id: \"storage.chargeDischargePower\", name: \"Charge/Discharge power (>0 charging, <0 discharging)\", type: 'number', unit: \"W\", role: 'value.power'},\n                register: {reg: 37765, type: ModbusDatatype.int32, length: 2}\n            },\n            {\n                state: {id: \"storage.forcibleChargeDischarge\", name: \"Forcible Charge/Discharge\", type: 'string', role: 'value'},\n                register: {reg: 47100, type: ModbusDatatype.uint16, length: 1},\n                mapper: value => Promise.resolve(StorageForcibleChargeDischarge[value])\n            },\n\n            // grid\n            {\n                state: {id: \"grid.meterStatus\", name: \"Meter status\", type: 'string', role: 'value.status'},\n                register: {reg: 37100, type: ModbusDatatype.uint16, length: 1},\n                mapper: value => Promise.resolve(MeterStatus[value])\n            },\n            {\n                state: {id: \"grid.activePower\", name: \"Active power\", type: 'number', role: 'value.power', unit: \"W\"},\n                register: {reg: 37113, type: ModbusDatatype.int32, length: 2},\n            }\n        ];\n    }\n\n    public async createStates(adapter: AdapterInstance): Promise<void> {\n        const all = this.initialFields.concat(this.changingFields)\n        for (const field of all) {\n            const state = field.state\n            await adapter.setObjectNotExistsAsync(state.id, {\n                type: 'state',\n                common: {\n                    name: state.name,\n                    type: state.type,\n                    role: state.role,\n                    unit: state.unit,\n                    read: true,\n                    write: false\n                },\n                native: {},\n            });\n        }\n    }\n\n    public async updateInitialStates(adapter: AdapterInstance, device: ModbusDevice): Promise<void> {\n        let toUpdate: StateToUpdate[] = [];\n        for (const field of this.initialFields) {\n            try {\n                let value = await device.readModbusHR(field.register.reg, field.register.type, field.register.length);\n\n                if (field.register.gain) {\n                    value /= field.register.gain;\n                }\n                if (field.mapper) {\n                    value = await field.mapper(value);\n                }\n                toUpdate.push({id: field.state.id, value: value});\n            } catch {\n                // do nothing - for now\n            }\n        }\n        for (const stateToUpdate of toUpdate) {\n            if (stateToUpdate.value) {\n                await adapter.setStateAsync(stateToUpdate.id, {val: stateToUpdate.value, ack: true});\n            }\n        }\n    }\n\n    public async updateChangingStates(adapter: AdapterInstance, device: ModbusDevice): Promise<void> {\n        let toUpdate: StateToUpdate[] = [];\n        for (const field of this.changingFields) {\n            try {\n                let value = await device.readModbusHR(field.register.reg, field.register.type, field.register.length);\n\n                if (field.register.gain) {\n                    value /= field.register.gain;\n                }\n                if (field.mapper) {\n                    value = await field.mapper(value);\n                }\n                toUpdate.push({id: field.state.id, value: value});\n            } catch {\n                // do nothing - for now\n            }\n        }\n        for (const stateToUpdate of toUpdate) {\n            if (stateToUpdate.value) {\n                await adapter.setStateAsync(stateToUpdate.id, {val: stateToUpdate.value, ack: true});\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
