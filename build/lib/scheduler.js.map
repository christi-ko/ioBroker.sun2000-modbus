{
  "version": 3,
  "sources": ["../../src/lib/scheduler.ts"],
  "sourcesContent": ["import {AdapterInstance} from '@iobroker/adapter-core';\n\ninterface Interval {\n    name: string;\n    timeout: number;\n    callback: (...args: any) => Promise<number>\n}\n\nexport class Scheduler {\n\n    private intervals: Interval[] = [];\n    private counter: number = 0;\n    private adapter: AdapterInstance;\n    private intervalLcm!: number;\n\n    constructor(adapter: AdapterInstance) {\n        this.adapter = adapter;\n    }\n\n    public addInterval<TArgs extends any[]>(name: string, timeout: number, callback: (...args: TArgs) => Promise<number>): void {\n        this.intervals.push({name: name, timeout: timeout, callback: callback});\n    }\n\n    public init(): void {\n        const allIntervals = this.intervals.map(value => value.timeout);\n        this.intervalLcm = this.lcm(allIntervals);\n        this.adapter.log.info(`Scheduler intervals lcm ${this.intervalLcm}`);\n    }\n\n    public async run(): Promise<void> {\n        this.adapter.log.silly('Run scheduler...');\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        this.adapter.log.silly(`Scheduler: counter ${this.counter}`)\n        for (const idx in this.intervals) {\n            if (this.counter % this.intervals[idx].timeout == 0) {\n                // execute interval\n                this.adapter.log.silly(`Scheduler: run ${this.intervals[idx].name}`);\n                this.adapter.log.debug(`Interval action started [${this.intervals[idx].name}]`);\n                const start = new Date().getTime();\n\n                const updatedCount = await this.intervals[idx].callback();\n\n                const elapsed = new Date().getTime() - start;\n                this.adapter.log.info(`Updated ${updatedCount} registers in ${elapsed / 1000} sec, [${this.intervals[idx].name}]`);\n            }\n        }\n        this.counter++;\n        if (this.counter == this.intervalLcm) {\n            this.adapter.log.debug('Scheduler: Resetting counter');\n            this.counter = 0;\n        }\n        this.adapter.log.silly(`Scheduler: run callback finished: counter [${this.counter}]`);\n        setTimeout(async () => {\n            await this.run();\n        }, 1000);\n    }\n\n    private lcm(values: number[]): number {\n        const gcd = (x: number, y: number): number => (!y ? x : gcd(y, x % y));\n        const _lcm = (x: number, y: number): number => (x * y) / gcd(x, y);\n        return [...values].reduce((a, b) => _lcm(a, b));\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQO,MAAM,UAAU;AAAA,EAOnB,YAAY,SAA0B;AALtC,SAAQ,YAAwB,CAAC;AACjC,SAAQ,UAAkB;AAKtB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEO,YAAiC,MAAc,SAAiB,UAAqD;AACxH,SAAK,UAAU,KAAK,EAAC,MAAY,SAAkB,SAAkB,CAAC;AAAA,EAC1E;AAAA,EAEO,OAAa;AAChB,UAAM,eAAe,KAAK,UAAU,IAAI,WAAS,MAAM,OAAO;AAC9D,SAAK,cAAc,KAAK,IAAI,YAAY;AACxC,SAAK,QAAQ,IAAI,KAAK,2BAA2B,KAAK,aAAa;AAAA,EACvE;AAAA,EAEA,MAAa,MAAqB;AAC9B,SAAK,QAAQ,IAAI,MAAM,kBAAkB;AAEzC,SAAK,QAAQ,IAAI,MAAM,sBAAsB,KAAK,SAAS;AAC3D,eAAW,OAAO,KAAK,WAAW;AAC9B,UAAI,KAAK,UAAU,KAAK,UAAU,KAAK,WAAW,GAAG;AAEjD,aAAK,QAAQ,IAAI,MAAM,kBAAkB,KAAK,UAAU,KAAK,MAAM;AACnE,aAAK,QAAQ,IAAI,MAAM,4BAA4B,KAAK,UAAU,KAAK,OAAO;AAC9E,cAAM,QAAQ,IAAI,KAAK,EAAE,QAAQ;AAEjC,cAAM,eAAe,MAAM,KAAK,UAAU,KAAK,SAAS;AAExD,cAAM,UAAU,IAAI,KAAK,EAAE,QAAQ,IAAI;AACvC,aAAK,QAAQ,IAAI,KAAK,WAAW,6BAA6B,UAAU,aAAc,KAAK,UAAU,KAAK,OAAO;AAAA,MACrH;AAAA,IACJ;AACA,SAAK;AACL,QAAI,KAAK,WAAW,KAAK,aAAa;AAClC,WAAK,QAAQ,IAAI,MAAM,8BAA8B;AACrD,WAAK,UAAU;AAAA,IACnB;AACA,SAAK,QAAQ,IAAI,MAAM,8CAA8C,KAAK,UAAU;AACpF,eAAW,YAAY;AACnB,YAAM,KAAK,IAAI;AAAA,IACnB,GAAG,GAAI;AAAA,EACX;AAAA,EAEQ,IAAI,QAA0B;AAClC,UAAM,MAAM,CAAC,GAAW,MAAuB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC;AACpE,UAAM,OAAO,CAAC,GAAW,MAAuB,IAAI,IAAK,IAAI,GAAG,CAAC;AACjE,WAAO,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,GAAG,MAAM,KAAK,GAAG,CAAC,CAAC;AAAA,EAClD;AACJ;",
  "names": []
}
