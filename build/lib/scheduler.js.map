{
  "version": 3,
  "sources": ["../../src/lib/scheduler.ts"],
  "sourcesContent": ["import {Mutex} from \"async-mutex\";\nimport {AdapterInstance} from \"@iobroker/adapter-core\";\ninterface Interval {\n    name: string;\n    timeout: number;\n    callback: (...args: any) => Promise<void>\n}\n\nexport class Scheduler {\n\n    private intervals: Interval[] = [];\n    private counter: number = 0;\n    private mutex: Mutex = new Mutex();\n    private adapter: AdapterInstance;\n    private intervalLcm!: number;\n\n    constructor(adapter: AdapterInstance) {\n        this.adapter = adapter;\n    }\n\n    public addInterval<TArgs extends any[]>(name: string, timeout: number, callback: (...args: TArgs) => Promise<void> ): void {\n        this.intervals.push({name:name, timeout: timeout, callback: callback});\n    }\n\n    public init() {\n        const allIntervals = this.intervals.map(value => value.timeout);\n        this.intervalLcm = this.lcm(allIntervals);\n        this.adapter.log.info(`Scheduler intervals lcm ${this.intervalLcm}`);\n    }\n\n    public async run() {\n        const self = this;\n        this.adapter.log.silly(\"Run scheduler...\");\n        if (self.mutex.isLocked()) {\n            this.adapter.log.silly(\"Scheduler: Skip run. LOCKED\");\n            // Skip this run if it's currently locked\n            return;\n        }\n        await self.mutex.runExclusive(async () => {\n            this.adapter.log.silly(`Scheduler: counter ${this.counter}, locked=${self.mutex.isLocked()}`)\n            for (const idx in this.intervals) {\n                if (this.counter % this.intervals[idx].timeout == 0) {\n                    // execute interval\n                    this.adapter.log.silly(`Scheduler: run ${this.intervals[idx].name}`);\n                    this.adapter.log.debug(`Interval action started [${this.intervals[idx].name}]`);\n                    let start = new Date().getTime();\n\n                    await this.intervals[idx].callback();\n\n                    const elapsed = new Date().getTime() - start;\n                    this.adapter.log.info(`Interval action finished in ${elapsed / 1000} sec, [${this.intervals[idx].name}]`);\n                }\n            }\n            this.counter++;\n            if (this.counter == this.intervalLcm) {\n                this.counter = 0;\n            }\n            this.adapter.log.silly(\"Scheduler: run callback finished\");\n        });\n    }\n\n    private lcm(values: number[]) {\n        const gcd = (x:number, y:number):number => (!y ? x : gcd(y, x % y));\n        const _lcm = (x:number, y:number):number => (x * y) / gcd(x, y);\n        return [...values].reduce((a, b) => _lcm(a, b));\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoB;AAQb,MAAM,UAAU;AAAA,EAQnB,YAAY,SAA0B;AANtC,SAAQ,YAAwB,CAAC;AACjC,SAAQ,UAAkB;AAC1B,SAAQ,QAAe,IAAI,yBAAM;AAK7B,SAAK,UAAU;AAAA,EACnB;AAAA,EAEO,YAAiC,MAAc,SAAiB,UAAoD;AACvH,SAAK,UAAU,KAAK,EAAC,MAAW,SAAkB,SAAkB,CAAC;AAAA,EACzE;AAAA,EAEO,OAAO;AACV,UAAM,eAAe,KAAK,UAAU,IAAI,WAAS,MAAM,OAAO;AAC9D,SAAK,cAAc,KAAK,IAAI,YAAY;AACxC,SAAK,QAAQ,IAAI,KAAK,2BAA2B,KAAK,aAAa;AAAA,EACvE;AAAA,EAEA,MAAa,MAAM;AACf,UAAM,OAAO;AACb,SAAK,QAAQ,IAAI,MAAM,kBAAkB;AACzC,QAAI,KAAK,MAAM,SAAS,GAAG;AACvB,WAAK,QAAQ,IAAI,MAAM,6BAA6B;AAEpD;AAAA,IACJ;AACA,UAAM,KAAK,MAAM,aAAa,YAAY;AACtC,WAAK,QAAQ,IAAI,MAAM,sBAAsB,KAAK,mBAAmB,KAAK,MAAM,SAAS,GAAG;AAC5F,iBAAW,OAAO,KAAK,WAAW;AAC9B,YAAI,KAAK,UAAU,KAAK,UAAU,KAAK,WAAW,GAAG;AAEjD,eAAK,QAAQ,IAAI,MAAM,kBAAkB,KAAK,UAAU,KAAK,MAAM;AACnE,eAAK,QAAQ,IAAI,MAAM,4BAA4B,KAAK,UAAU,KAAK,OAAO;AAC9E,cAAI,QAAQ,IAAI,KAAK,EAAE,QAAQ;AAE/B,gBAAM,KAAK,UAAU,KAAK,SAAS;AAEnC,gBAAM,UAAU,IAAI,KAAK,EAAE,QAAQ,IAAI;AACvC,eAAK,QAAQ,IAAI,KAAK,+BAA+B,UAAU,aAAc,KAAK,UAAU,KAAK,OAAO;AAAA,QAC5G;AAAA,MACJ;AACA,WAAK;AACL,UAAI,KAAK,WAAW,KAAK,aAAa;AAClC,aAAK,UAAU;AAAA,MACnB;AACA,WAAK,QAAQ,IAAI,MAAM,kCAAkC;AAAA,IAC7D,CAAC;AAAA,EACL;AAAA,EAEQ,IAAI,QAAkB;AAC1B,UAAM,MAAM,CAAC,GAAU,MAAqB,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC;AACjE,UAAM,OAAO,CAAC,GAAU,MAAqB,IAAI,IAAK,IAAI,GAAG,CAAC;AAC9D,WAAO,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,GAAG,MAAM,KAAK,GAAG,CAAC,CAAC;AAAA,EAClD;AACJ;",
  "names": []
}
