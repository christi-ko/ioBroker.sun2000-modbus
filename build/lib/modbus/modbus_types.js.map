{
  "version": 3,
  "sources": ["../../../src/lib/modbus/modbus_types.ts"],
  "sourcesContent": ["import {Uint64BE} from 'int64-buffer';\n\nexport enum ModbusDatatype {\n    acc32,\n    acc64,\n    bitfield16,\n    bitfield32,\n    enum16,\n    int16,\n    int32,\n    string,\n    sunssf,\n    uint16,\n    uint32,\n    uint64,\n    buffer\n}\n\nexport namespace ModbusDatatype {\n    export function words(dtype: ModbusDatatype): number | undefined {\n        switch (dtype) {\n            case ModbusDatatype.acc32:\n                return 2;\n            case ModbusDatatype.acc64:\n                return 4;\n            case ModbusDatatype.bitfield16:\n                return 1;\n            case ModbusDatatype.bitfield32:\n                return 2;\n            case ModbusDatatype.enum16:\n                return 1;\n            case ModbusDatatype.int16:\n                return 1;\n            case ModbusDatatype.int32:\n                return 2;\n            case ModbusDatatype.string:\n                return undefined;\n            case ModbusDatatype.sunssf:\n                return undefined;\n            case ModbusDatatype.uint16:\n                return 1;\n            case ModbusDatatype.uint32:\n                return 2;\n            case ModbusDatatype.uint64:\n                return 4;\n            case ModbusDatatype.buffer:\n                return undefined;\n\n        }\n    }\n\n    export function fromBuffer(dtype: ModbusDatatype, buffer: Buffer): number | string | undefined {\n        switch (dtype) {\n            case ModbusDatatype.int16:\n                if (buffer.equals(Buffer.from('8000', 'hex'))) {\n                    return undefined;\n                } else {\n                    return buffer.readInt16BE(0);\n                }\n            case ModbusDatatype.int32:\n                if (buffer.equals(Buffer.from('8000 0000', 'hex'))) {\n                    return undefined;\n                } else {\n                    return buffer.readInt32BE(0);\n                }\n            case ModbusDatatype.string:\n                return buffer.toString('utf-8').replace(/\\0/g, '');\n            case ModbusDatatype.buffer:\n                console.log(buffer);\n                break\n\n            case ModbusDatatype.uint16:\n                if (buffer.equals(Buffer.from('FFFF', 'hex'))) {\n                    return undefined;\n                } else {\n                    console.log(buffer);\n                    return buffer.readUInt16BE(0)\n                }\n            case ModbusDatatype.uint32:\n            case ModbusDatatype.acc32:\n                if (buffer.equals(Buffer.from('FFFFFFFF', 'hex'))) {\n                    return undefined;\n                } else {\n                    return buffer.readUInt32BE(0)\n                }\n            case ModbusDatatype.uint64:\n            case ModbusDatatype.acc64:\n                if (buffer.equals(Buffer.from('FFFFFFFFFFFFFFFF', 'hex'))) {\n                    return undefined;\n                } else {\n                    return new Uint64BE(buffer).toNumber()\n                }\n            default:\n                return undefined;\n        }\n    }\n}\n\n// export enum ModbusPermission {\n//     RW,\n//     RO\n// }\n//\n// export interface ModbusDefinition {\n//     address: number,\n//     datatype: ModbusDatatype,\n//     permission: ModbusPermission\n// }\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuB;AAEhB,IAAK,iBAAL,kBAAKA,oBAAL;AACH,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AAbQ,SAAAA;AAAA,GAAA;AAAA,CAgBL,CAAUA,oBAAV;AACI,WAAS,MAAM,OAA2C;AAC7D,YAAQ,OAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,IAEf;AAAA,EACJ;AA9BO,EAAAA,gBAAS;AAgCT,WAAS,WAAW,OAAuB,QAA6C;AAC3F,YAAQ,OAAO;AAAA,MACX,KAAK;AACD,YAAI,OAAO,OAAO,OAAO,KAAK,QAAQ,KAAK,CAAC,GAAG;AAC3C,iBAAO;AAAA,QACX,OAAO;AACH,iBAAO,OAAO,YAAY,CAAC;AAAA,QAC/B;AAAA,MACJ,KAAK;AACD,YAAI,OAAO,OAAO,OAAO,KAAK,aAAa,KAAK,CAAC,GAAG;AAChD,iBAAO;AAAA,QACX,OAAO;AACH,iBAAO,OAAO,YAAY,CAAC;AAAA,QAC/B;AAAA,MACJ,KAAK;AACD,eAAO,OAAO,SAAS,OAAO,EAAE,QAAQ,OAAO,EAAE;AAAA,MACrD,KAAK;AACD,gBAAQ,IAAI,MAAM;AAClB;AAAA,MAEJ,KAAK;AACD,YAAI,OAAO,OAAO,OAAO,KAAK,QAAQ,KAAK,CAAC,GAAG;AAC3C,iBAAO;AAAA,QACX,OAAO;AACH,kBAAQ,IAAI,MAAM;AAClB,iBAAO,OAAO,aAAa,CAAC;AAAA,QAChC;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,YAAI,OAAO,OAAO,OAAO,KAAK,YAAY,KAAK,CAAC,GAAG;AAC/C,iBAAO;AAAA,QACX,OAAO;AACH,iBAAO,OAAO,aAAa,CAAC;AAAA,QAChC;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,YAAI,OAAO,OAAO,OAAO,KAAK,oBAAoB,KAAK,CAAC,GAAG;AACvD,iBAAO;AAAA,QACX,OAAO;AACH,iBAAO,IAAI,6BAAS,MAAM,EAAE,SAAS;AAAA,QACzC;AAAA,MACJ;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AA5CO,EAAAA,gBAAS;AAAA,GAjCH;",
  "names": ["ModbusDatatype"]
}
