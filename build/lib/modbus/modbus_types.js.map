{
  "version": 3,
  "sources": ["../../../src/lib/modbus/modbus_types.ts"],
  "sourcesContent": ["import {Uint64BE} from \"int64-buffer\";\n\n\nexport enum ModbusDatatype {\n    acc32,\n    acc64,\n    bitfield16,\n    bitfield32,\n    enum16,\n    int16,\n    int32,\n    string,\n    sunssf,\n    uint16,\n    uint32,\n    uint64,\n    buffer\n}\nexport namespace ModbusDatatype {\n    export function words(dtype: ModbusDatatype): number | undefined{\n        switch (dtype) {\n            case ModbusDatatype.acc32: return 2;\n            case ModbusDatatype.acc64: return 4;\n            case ModbusDatatype.bitfield16: return 1;\n            case ModbusDatatype.bitfield32: return 2;\n            case ModbusDatatype.enum16: return 1;\n            case ModbusDatatype.int16: return 1;\n            case ModbusDatatype.int32: return 2;\n            case ModbusDatatype.string: return undefined;\n            case ModbusDatatype.sunssf: return undefined;\n            case ModbusDatatype.uint16: return 1;\n            case ModbusDatatype.uint32: return 2;\n            case ModbusDatatype.uint64: return 4;\n            case ModbusDatatype.buffer: return undefined;\n            \n        }\n    }\n\n    export function fromBuffer(dtype: ModbusDatatype, buffer: Buffer): number | string | undefined {\n        switch (dtype) {\n            case ModbusDatatype.int16:\n                if (buffer.equals(Buffer.from(\"8000\", \"hex\"))){\n                    return undefined;\n                }else{\n                    return buffer.readInt16BE(0);\n                }\n            case ModbusDatatype.int32:\n                if(buffer.equals(Buffer.from(\"8000 0000\", \"hex\"))){\n                    return undefined;\n                }else{\n                    return buffer.readInt32BE(0);\n                }\n            case ModbusDatatype.string: return buffer.toString(\"utf-8\").replace(/\\0/g, '');\n            case ModbusDatatype.buffer: console.log(buffer); break\n            \n            case ModbusDatatype.uint16:\n                if(buffer.equals(Buffer.from(\"FFFF\", \"hex\"))){\n                    return undefined;\n                }else{\n                    console.log(buffer);\n                    return buffer.readUInt16BE(0)\n                }\n            case ModbusDatatype.uint32 || ModbusDatatype.acc32:\n                if(buffer.equals(Buffer.from(\"FFFFFFFF\", \"hex\"))){\n                    return undefined;\n                }else{\n                    return buffer.readUInt32BE(0)\n                }\n            case ModbusDatatype.uint64 || ModbusDatatype.acc64:\n                if(buffer.equals(Buffer.from(\"FFFFFFFFFFFFFFFF\", \"hex\"))){\n                    return undefined;\n                }else{\n                    return new Uint64BE(buffer).toNumber()\n                }\n            default: return undefined;\n        }\n    }\n}\n\nexport enum ModbusPermission {\n    RW,\n    RO\n}\n\nexport interface ModbusDefinition {\n    address: number,\n    datatype: ModbusDatatype,\n    permission: ModbusPermission\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuB;AAGhB,IAAK,iBAAL,kBAAKA,oBAAL;AACH,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AAbQ,SAAAA;AAAA,GAAA;AAAA,CAeL,CAAUA,oBAAV;AACI,WAAS,MAAM,OAA0C;AAC5D,YAAQ,OAAO;AAAA,MACX,KAAK;AAAsB,eAAO;AAAA,MAClC,KAAK;AAAsB,eAAO;AAAA,MAClC,KAAK;AAA2B,eAAO;AAAA,MACvC,KAAK;AAA2B,eAAO;AAAA,MACvC,KAAK;AAAuB,eAAO;AAAA,MACnC,KAAK;AAAsB,eAAO;AAAA,MAClC,KAAK;AAAsB,eAAO;AAAA,MAClC,KAAK;AAAuB,eAAO;AAAA,MACnC,KAAK;AAAuB,eAAO;AAAA,MACnC,KAAK;AAAuB,eAAO;AAAA,MACnC,KAAK;AAAuB,eAAO;AAAA,MACnC,KAAK;AAAuB,eAAO;AAAA,MACnC,KAAK;AAAuB,eAAO;AAAA,IAEvC;AAAA,EACJ;AAjBO,EAAAA,gBAAS;AAmBT,WAAS,WAAW,OAAuB,QAA6C;AAC3F,YAAQ,OAAO;AAAA,MACX,KAAK;AACD,YAAI,OAAO,OAAO,OAAO,KAAK,QAAQ,KAAK,CAAC,GAAE;AAC1C,iBAAO;AAAA,QACX,OAAK;AACD,iBAAO,OAAO,YAAY,CAAC;AAAA,QAC/B;AAAA,MACJ,KAAK;AACD,YAAG,OAAO,OAAO,OAAO,KAAK,aAAa,KAAK,CAAC,GAAE;AAC9C,iBAAO;AAAA,QACX,OAAK;AACD,iBAAO,OAAO,YAAY,CAAC;AAAA,QAC/B;AAAA,MACJ,KAAK;AAAuB,eAAO,OAAO,SAAS,OAAO,EAAE,QAAQ,OAAO,EAAE;AAAA,MAC7E,KAAK;AAAuB,gBAAQ,IAAI,MAAM;AAAG;AAAA,MAEjD,KAAK;AACD,YAAG,OAAO,OAAO,OAAO,KAAK,QAAQ,KAAK,CAAC,GAAE;AACzC,iBAAO;AAAA,QACX,OAAK;AACD,kBAAQ,IAAI,MAAM;AAClB,iBAAO,OAAO,aAAa,CAAC;AAAA,QAChC;AAAA,MACJ,KAAK;AACD,YAAG,OAAO,OAAO,OAAO,KAAK,YAAY,KAAK,CAAC,GAAE;AAC7C,iBAAO;AAAA,QACX,OAAK;AACD,iBAAO,OAAO,aAAa,CAAC;AAAA,QAChC;AAAA,MACJ,KAAK;AACD,YAAG,OAAO,OAAO,OAAO,KAAK,oBAAoB,KAAK,CAAC,GAAE;AACrD,iBAAO;AAAA,QACX,OAAK;AACD,iBAAO,IAAI,6BAAS,MAAM,EAAE,SAAS;AAAA,QACzC;AAAA,MACJ;AAAS,eAAO;AAAA,IACpB;AAAA,EACJ;AAtCO,EAAAA,gBAAS;AAAA,GApBH;AA6DV,IAAK,mBAAL,kBAAKC,sBAAL;AACH,EAAAA,oCAAA;AACA,EAAAA,oCAAA;AAFQ,SAAAA;AAAA,GAAA;",
  "names": ["ModbusDatatype", "ModbusPermission"]
}
