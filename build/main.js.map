{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\nimport {InverterStates, UpdateIntervalID} from './lib/states';\nimport {ModbusDevice} from './lib/modbus/modbus_device';\nimport {Scheduler} from './lib/scheduler';\n\nclass Sun2000Modbus extends utils.Adapter {\n\n    private device!: ModbusDevice;\n    private updateInterval: any = null;\n    private states!: InverterStates;\n    private scheduler: Scheduler;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'sun2000-modbus',\n        });\n        this.scheduler = new Scheduler(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        this.states = new InverterStates({intervals: [this.config.updateIntervalHigh, this.config.updateIntervalHigh, this.config.updateIntervalHigh]});\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        await this.setStateAsync('info.ip', {val: this.config.address, ack: true});\n        await this.setStateAsync('info.port', {val: this.config.port, ack: true});\n        await this.setStateAsync('info.unitID', {val: this.config.modbusUnitId, ack: true});\n        await this.setStateAsync('info.modbusUpdateIntervalHigh', {val: this.config.updateIntervalHigh, ack: true});\n        await this.setStateAsync('info.modbusUpdateIntervalLow', {val: this.config.updateIntervalLow, ack: true});\n\n        this.device = new ModbusDevice(this.config.address, this.config.port, this.config.modbusUnitId);\n\n        this.log.info('Create states');\n        await this.states.createStates(this);\n        this.log.info('Update initial states');\n        await this.states.updateStates(this, this.device); // no recurring update\n\n        await this.setStateAsync('info.connection', true, true);\n\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n\n        this.scheduler.addInterval('HIGH', this.config.updateIntervalHigh, async () => {\n            return this.states.updateStates(self, this.device, UpdateIntervalID.HIGH);\n        });\n        this.scheduler.addInterval('LOW', this.config.updateIntervalLow, async () => {\n            return this.states.updateStates(self, this.device, UpdateIntervalID.LOW);\n        });\n\n        this.scheduler.init();\n\n        this.log.info('Start syncing data from inverter');\n        await this.scheduler.run();\n    }\n\n    // private sleep(ms: number) {\n    //     return new Promise(resolve => setTimeout(resolve, ms))\n    // }\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.setState('info.connection', false, true);\n            this.updateInterval && clearInterval(this.updateInterval);\n            this.device.close();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Sun2000Modbus(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Sun2000Modbus())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAGvB,oBAA+C;AAC/C,2BAA2B;AAC3B,uBAAwB;AAExB,MAAM,sBAAsB,MAAM,QAAQ;AAAA,EAO/B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AARL,SAAQ,iBAAsB;AAS1B,SAAK,YAAY,IAAI,2BAAU,IAAI;AACnC,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAGnC,SAAK,SAAS,IAAI,6BAAe,EAAC,WAAW,CAAC,KAAK,OAAO,oBAAoB,KAAK,OAAO,oBAAoB,KAAK,OAAO,kBAAkB,EAAC,CAAC;AAI9I,UAAM,KAAK,cAAc,WAAW,EAAC,KAAK,KAAK,OAAO,SAAS,KAAK,KAAI,CAAC;AACzE,UAAM,KAAK,cAAc,aAAa,EAAC,KAAK,KAAK,OAAO,MAAM,KAAK,KAAI,CAAC;AACxE,UAAM,KAAK,cAAc,eAAe,EAAC,KAAK,KAAK,OAAO,cAAc,KAAK,KAAI,CAAC;AAClF,UAAM,KAAK,cAAc,iCAAiC,EAAC,KAAK,KAAK,OAAO,oBAAoB,KAAK,KAAI,CAAC;AAC1G,UAAM,KAAK,cAAc,gCAAgC,EAAC,KAAK,KAAK,OAAO,mBAAmB,KAAK,KAAI,CAAC;AAExG,SAAK,SAAS,IAAI,kCAAa,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,KAAK,OAAO,YAAY;AAE9F,SAAK,IAAI,KAAK,eAAe;AAC7B,UAAM,KAAK,OAAO,aAAa,IAAI;AACnC,SAAK,IAAI,KAAK,uBAAuB;AACrC,UAAM,KAAK,OAAO,aAAa,MAAM,KAAK,MAAM;AAEhD,UAAM,KAAK,cAAc,mBAAmB,MAAM,IAAI;AAGtD,UAAM,OAAO;AAEb,SAAK,UAAU,YAAY,QAAQ,KAAK,OAAO,oBAAoB,YAAY;AAC3E,aAAO,KAAK,OAAO,aAAa,MAAM,KAAK,QAAQ,+BAAiB,IAAI;AAAA,IAC5E,CAAC;AACD,SAAK,UAAU,YAAY,OAAO,KAAK,OAAO,mBAAmB,YAAY;AACzE,aAAO,KAAK,OAAO,aAAa,MAAM,KAAK,QAAQ,+BAAiB,GAAG;AAAA,IAC3E,CAAC;AAED,SAAK,UAAU,KAAK;AAEpB,SAAK,IAAI,KAAK,kCAAkC;AAChD,UAAM,KAAK,UAAU,IAAI;AAAA,EAC7B;AAAA,EAQQ,SAAS,UAA4B;AACzC,QAAI;AACA,WAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,WAAK,kBAAkB,cAAc,KAAK,cAAc;AACxD,WAAK,OAAO,MAAM;AAClB,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAKQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,cAAc,OAAO;AACtG,OAAO;AAEH,GAAC,MAAM,IAAI,cAAc,GAAG;AAChC;",
  "names": []
}
