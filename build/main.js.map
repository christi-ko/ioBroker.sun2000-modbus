{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\nimport {InverterStates} from \"./lib/states\";\nimport {ModbusDevice} from \"./lib/modbus/modbus_device\";\n// import * as fs from \"fs\";\n\nclass Sun2000Modbus extends utils.Adapter {\n\n    private device!: ModbusDevice\n    private updateInterval: any = null;\n    private states: InverterStates = new InverterStates()\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'sun2000-modbus',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        this.config.updateInterval = 5;\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        await this.setStateAsync(\"info.ip\", {val: this.config.address, ack: true});\n        await this.setStateAsync(\"info.port\", {val: this.config.port, ack: true});\n        await this.setStateAsync(\"info.unitID\", {val: this.config.modbusUnitId, ack: true});\n        await this.setStateAsync(\"info.modbusUpdateInterval\", {val: this.config.updateInterval, ack: true});\n\n        this.log.info('config address: ' + this.config.address);\n        this.log.info('config port: ' + this.config.port);\n        this.log.info('config unitID: ' + this.config.modbusUnitId);\n        this.log.info('config updateInterval: ' + this.config.updateInterval);\n\n        this.device = new ModbusDevice(this.config.address, this.config.port, this.config.modbusUnitId);\n\n        await this.states.createStates(this);\n        await this.states.updateInitialStates(this, this.device);\n\n        // let model = await this.device.getModel();\n        // this.log.info(`inverter model: ${model}`);\n        // let modelId = await this.device.getModellID();\n        // let serialNr = await this.device.getSerialNumber();\n        // await this.setStateAsync(\"info.model\", {val: model, ack: true});\n        // await this.setStateAsync(\"info.modelID\", {val: modelId, ack: true});\n        // await this.setStateAsync(\"info.serialNumber\", {val: serialNr, ack: true});\n\n        let self = this;\n        this.updateInterval = setInterval(async () => {\n            await this.states.updateChangingStates(self, this.device)\n        }, this.config.updateInterval * 1000);\n\n        /*\n        For every state in the system there has to be also an object of type state\n        Here a simple template for a boolean variable named \"testVariable\"\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n        */\n        // await this.setObjectNotExistsAsync('testVariable', {\n        //     type: 'state',\n        //     common: {\n        //         name: 'testVariable',\n        //         type: 'boolean',\n        //         role: 'indicator',\n        //         read: true,\n        //         write: true,\n        //     },\n        //     native: {},\n        // });\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        // this.subscribeStates('testVariable');\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates('lights.*');\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates('*');\n\n        /*\n            setState examples\n            you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n        */\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync('testVariable', true);\n\n        // same thing, but the value is flagged \"ack\"\n        // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync('testVariable', { val: true, ack: true });\n\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n\n        // examples for the checkPassword/checkGroup functions\n        // let result = await this.checkPasswordAsync('admin', 'iobroker');\n        // this.log.info('check user admin pw iobroker: ' + result);\n\n        // result = await this.checkGroupAsync('admin', 'admin');\n        // this.log.info('check group user admin group admin: ' + result);\n    }\n\n    // private async updateData() {\n    //     await this.setStateAsync(\"info.connection\", { val: this.device.isConnected(), ack: true})\n    //\n    //     let ratedPower = await this.device.getRatedPower();\n    //     let activePower = await this.device.getActivePower();\n    //     let inputPower = await this.device.getInputPower();\n    //     let storageStateOfCapacity = await this.device.getStorageStateOfCapacity();\n    //     let storageRunningState = await this.device.getStorageRunningStatus();\n    //     let storageChargeDischargePower = await this.device.getStorageChargeDischargePower();\n    //     let storageForcibleChargeDischarge = await this.device.getStorageForcibleChargeDischarge();\n    //\n    //     await this.setStateAsync(\"ratedPower\", {val: ratedPower, ack: true});\n    //     await this.setStateAsync(\"activePower\", {val: activePower, ack: true});\n    //     await this.setStateAsync(\"inputPower\", {val: inputPower, ack: true});\n    //     await this.setStateAsync(\"storage.runningState\", {val: storageRunningState, ack: true});\n    //     await this.setStateAsync(\"storage.stateOfCapacity\", {val: storageStateOfCapacity, ack: true});\n    //     await this.setStateAsync(\"storage.storageChargeDischargePower\", {val: storageChargeDischargePower, ack: true});\n    //     await this.setStateAsync(\"storage.storageForcibleChargeDischarge\", {val: storageForcibleChargeDischarge, ack: true});\n    //\n    //     await this.setStateAsync(\"info.lastUpdate\", {val: Date.now(), ack: true});\n    // }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            this.setState(\"info.connection\", false, true);\n            this.updateInterval && clearInterval(this.updateInterval);\n            this.device.close();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Sun2000Modbus(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Sun2000Modbus())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAGvB,oBAA6B;AAC7B,2BAA2B;AAG3B,MAAM,sBAAsB,MAAM,QAAQ;AAAA,EAM/B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AAPL,SAAQ,iBAAsB;AAC9B,SAAQ,SAAyB,IAAI,6BAAe;AAOhD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAEnC,SAAK,OAAO,iBAAiB;AAI7B,UAAM,KAAK,cAAc,WAAW,EAAC,KAAK,KAAK,OAAO,SAAS,KAAK,KAAI,CAAC;AACzE,UAAM,KAAK,cAAc,aAAa,EAAC,KAAK,KAAK,OAAO,MAAM,KAAK,KAAI,CAAC;AACxE,UAAM,KAAK,cAAc,eAAe,EAAC,KAAK,KAAK,OAAO,cAAc,KAAK,KAAI,CAAC;AAClF,UAAM,KAAK,cAAc,6BAA6B,EAAC,KAAK,KAAK,OAAO,gBAAgB,KAAK,KAAI,CAAC;AAElG,SAAK,IAAI,KAAK,qBAAqB,KAAK,OAAO,OAAO;AACtD,SAAK,IAAI,KAAK,kBAAkB,KAAK,OAAO,IAAI;AAChD,SAAK,IAAI,KAAK,oBAAoB,KAAK,OAAO,YAAY;AAC1D,SAAK,IAAI,KAAK,4BAA4B,KAAK,OAAO,cAAc;AAEpE,SAAK,SAAS,IAAI,kCAAa,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,KAAK,OAAO,YAAY;AAE9F,UAAM,KAAK,OAAO,aAAa,IAAI;AACnC,UAAM,KAAK,OAAO,oBAAoB,MAAM,KAAK,MAAM;AAUvD,QAAI,OAAO;AACX,SAAK,iBAAiB,YAAY,YAAY;AAC1C,YAAM,KAAK,OAAO,qBAAqB,MAAM,KAAK,MAAM;AAAA,IAC5D,GAAG,KAAK,OAAO,iBAAiB,GAAI;AAAA,EA8CxC;AAAA,EA2BQ,SAAS,UAA4B;AACzC,QAAI;AAMA,WAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,WAAK,kBAAkB,cAAc,KAAK,cAAc;AACxD,WAAK,OAAO,MAAM;AAClB,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAmBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,cAAc,OAAO;AACtG,OAAO;AAEH,GAAC,MAAM,IAAI,cAAc,GAAG;AAChC;",
  "names": []
}
