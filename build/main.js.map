{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\nimport {InverterStates} from \"./lib/states\";\nimport {ModbusDevice} from \"./lib/modbus/modbus_device\";\n// import * as fs from \"fs\";\n\nclass Sun2000Modbus extends utils.Adapter {\n\n    private device!: ModbusDevice\n    private updateInterval: any = null;\n    private states: InverterStates = new InverterStates()\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'sun2000-modbus',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        await this.setStateAsync(\"info.ip\", {val: this.config.address, ack: true});\n        await this.setStateAsync(\"info.port\", {val: this.config.port, ack: true});\n        await this.setStateAsync(\"info.unitID\", {val: this.config.modbusUnitId, ack: true});\n        await this.setStateAsync(\"info.modbusUpdateInterval\", {val: this.config.updateInterval, ack: true});\n\n        this.device = new ModbusDevice(this.config.address, this.config.port, this.config.modbusUnitId);\n\n        this.log.info(\"Create states\");\n        await this.states.createStates(this);\n        this.log.info(\"Update initial states\");\n        await this.states.updateInitialStates(this, this.device);\n\n        await this.setStateAsync(\"info.connection\", true, true);\n\n        let self = this;\n        this.log.info(\"Start syncing data from inverter\");\n        this.updateInterval = this.setInterval(async () => {\n            await this.states.updateChangingStates(self, this.device);\n        }, this.config.updateInterval * 1000);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.setState(\"info.connection\", false, true);\n            this.updateInterval && clearInterval(this.updateInterval);\n            this.device.close();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Sun2000Modbus(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Sun2000Modbus())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAGvB,oBAA6B;AAC7B,2BAA2B;AAG3B,MAAM,sBAAsB,MAAM,QAAQ;AAAA,EAM/B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AAPL,SAAQ,iBAAsB;AAC9B,SAAQ,SAAyB,IAAI,6BAAe;AAOhD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAKnC,UAAM,KAAK,cAAc,WAAW,EAAC,KAAK,KAAK,OAAO,SAAS,KAAK,KAAI,CAAC;AACzE,UAAM,KAAK,cAAc,aAAa,EAAC,KAAK,KAAK,OAAO,MAAM,KAAK,KAAI,CAAC;AACxE,UAAM,KAAK,cAAc,eAAe,EAAC,KAAK,KAAK,OAAO,cAAc,KAAK,KAAI,CAAC;AAClF,UAAM,KAAK,cAAc,6BAA6B,EAAC,KAAK,KAAK,OAAO,gBAAgB,KAAK,KAAI,CAAC;AAElG,SAAK,SAAS,IAAI,kCAAa,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,KAAK,OAAO,YAAY;AAE9F,SAAK,IAAI,KAAK,eAAe;AAC7B,UAAM,KAAK,OAAO,aAAa,IAAI;AACnC,SAAK,IAAI,KAAK,uBAAuB;AACrC,UAAM,KAAK,OAAO,oBAAoB,MAAM,KAAK,MAAM;AAEvD,UAAM,KAAK,cAAc,mBAAmB,MAAM,IAAI;AAEtD,QAAI,OAAO;AACX,SAAK,IAAI,KAAK,kCAAkC;AAChD,SAAK,iBAAiB,KAAK,YAAY,YAAY;AAC/C,YAAM,KAAK,OAAO,qBAAqB,MAAM,KAAK,MAAM;AAAA,IAC5D,GAAG,KAAK,OAAO,iBAAiB,GAAI;AAAA,EACxC;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AACA,WAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,WAAK,kBAAkB,cAAc,KAAK,cAAc;AACxD,WAAK,OAAO,MAAM;AAClB,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAKQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,cAAc,OAAO;AACtG,OAAO;AAEH,GAAC,MAAM,IAAI,cAAc,GAAG;AAChC;",
  "names": []
}
